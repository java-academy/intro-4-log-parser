:icons: font

= Log parser

An application that allows to parse the logs and offers several functionalities.

Logging tells us what happened. Of course, upon hearing it, it's clear *Java* should have multiple log files.

Let's parse them! Let's write a parser for out logs, that offers several functionalities.

TIP: See _Steps_ at the bottom of the page for how to proceed.

== Prerequirements

. *JDK11+*.
. *Maven 3.6 +*.
. A sheet of paper and a pen.

== Requirements

Remember to meet both NF and F!

=== Non-functional

. It must work (if it does not, it’s disqualified): if I cannot play, it does not work.
. OOD is a must.
. Analyze requirements.
. Create a list of object and method for this application.
. Create CRC cards.
. Create a flow chart.
. Only pure *JDK*, testing dependencies and static code analysis plugins are allowed.
. Write in TDD.
. Follow SOLID principles.
. Make commits on each significant change.
. Commit messages have to follow good practices.

=== Functional

. Parser accepts command-line switches (the startup parameters):
.. `-h` for help,
.. `-f` for log file name or path to logs directory,
.. `-t` targeted (direct search),
. Parser without the switches displays usage instructions (usage function).
. Parser run with the switch `-f`  and no path provided, by default takes all `*.log` files
in the directory where it was started.
. Parser run with the switch `-f` and the path to the directory takes all `*.log` files in this location.
. Parser run with the switch `-f` and the path to a file offers file statistics (example lower) , namely:
.. Number of messages in total.
.. Number of messages per level.
.. Exception statistics (how many of which type)
+

.Messages int total and per level
----
File: output.log

TOTAL: 8

ERROR: 5
WARNING: 3
----

. Parser allows directed searches (example below) with switch `-t` and searched *string*.
.. Parser either displays "NOT FOUND".
+

.Directed search example
----
> log_parser.py -t "phrase I'm looking for" -f filename.log
Looking for "phrase I'm looking for" in filename.log
NOT FOUND
----

.. Or parser displays "FOUND x occurrences, first on line y"
+

.Directed search example
----
> log_parser.py -t "phrase I'm looking for and find" -f filename.log
Looking for "phrase I'm looking for and find" in filename.log
FOUND 1 occurrences, first on line 1
----

== Steps

IMPORTANT: Work on _branches_!

. Conceptualization
+

TIP: You can use the pen and the paper for all notes and drawings.

.. Read the description of the project (a few first lines of the specification)
and functional requirements.
.. Conceptualize: write down nouns and verbs from the specs (main ones).
.. Draw a flow chart for a simple version of the program.
. Branch *JShell*
.. Launch `JShell` and tackle there the main technical problem you anticipate:
... file reading.
+

IMPORTANT: Next, you have to create your app *4 times* from scraps.
Each time in new branch derived from branch *JShell*.

. Branch *Imperative*
+

CAUTION: Right now, you should use mantra to start your project.

.. Rework the `JShell` file into a Java file, with proper class and main method.
Use just java to launch it, code imperatively for now.
. Branch *OOP*
+

CAUTION: So far you have been increasing your familiarity with the problem.
It’s time to do more. For instance: let’s introduce OOP.

.. If you haven’t so far - use mantra and have a full-blown project with pom.xml, Maven, etc.
. Branch *TDD*
+

TIP: Have in mind `@DataProvider`.

.. Add TestNG to your POM - on test scope of course.
.. Create a `TODO.lst` file and have there the list of your test scenarios.
.. Scenario by scenario, you do the TDD mantra: red-green-refactor.
. Branch *FP*
.. Introduce functional API: streams and lambdas
.. Perhaps write a version of the app where you do everything in one line (stream!)
